scalar DateTime

type Query{
    getSuscribedCourses: [Course]
    getTopicsByCourseId(id: ID): [Topic]
    getTodayUserTopics: [Topic]
    searchCourses(query: String): [Course]
    getCourseById(id: ID): Course
    getUserTopics: [Topic]
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  setToogleCourseSucribed(courseId: ID): ToogleCourseSucribedResponse
}

type ToogleCourseSucribedResponse {
  success: Boolean
  eliminated: Boolean
  created: Boolean
}

type User {
  id: ID!
  email: String!
  name: String
  password: String
  courses: [CoursesSuscribed!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Topic {
  id: ID!
  title: String!
  description: String
  startDate: DateTime!
  endDate: DateTime!
  course: Course!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Course {
  id: ID!
  title: String!
  description: String
  imgUrl: String
  startDate: DateTime!
  endDate: DateTime!
  isSuscribed: Boolean
  entity: Entity!
  topics: [Topic!]!
  users: [CoursesSuscribed!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CoursesSuscribed {
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID
  courseId: ID
  user: User!
  course: Course!
}

type Entity {
  id: ID!
  name: String!
  description: String
  avatarUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
  courses: [Course!]!
}


type AuthPayload {
  token: String
  user: User
}
